---
title: "historical_comparison_by_yr"
format: docx
editor: visual
---
The purpose of this document is to compare the data in the Oracle TIP dataset to the data in the historical TIP records by year. 

Step 1: extract data by year from each source 

``` {r} 
librarian::shelf(here, tidyverse, ROracle, keyring, dotenv, lubridate, flextable)

yr <- 1997

# extract oracle by yr and state ####

cr_tip_yr(state_codes = "PR", year = "yr")

# or load ORACLE 
com_tip_PR <-
  readRDS("~/SEFSC-SFD-CFB-TIP-Compositions/data/raw/com_tip_PR_2004_20240216.RDS")

# Create a comparable table
com_tip_PR_skeleton <- com_tip_PR %>% # select comparable variables
  select(
    ID, INTERVIEW_DATE, YEAR, REPORTING_AREA_ZIP, SAMPLE_AREA_STATE_CODE, 
    SAMPLE_AREA_COUNTY_CODE, SAMPLE_AREA_ZIP, LANDING_AREA_PLACE_CODE, 
    LANDING_AREA_COUNTY_CODE, SAMPLE_AREA_PLACE_CODE,
    GEAR_1, GEARNAME_1, GEAR_QTY_1, GEAR_FREQUENCY1, MIN_DEPTH1, MAX_DEPTH1,
    OBS_STANDARD_SPECIES_CODE, OBS_STANDARD_SPECIES_NAME, TRIP_DAYS_FISHED,
    LENGTH1, LENGTH_UNIT1, LENGTH_UNIT_CODE1, LENGTH_TYPE1, LENGTH_TYPE_CODE1,
    LENGTH1_MM, OBS_WEIGHT, OBS_WEIGHT_KG, OBS_WEIGHT_UNIT, OBS_WEIGHT_UNIT_ID
  )

# create new filterable date value
com_tip_PR_NEWDATE <- com_tip_PR_skeleton %>%
  mutate(
    TEST_DATE = as.Date(ymd_hms(INTERVIEW_DATE)),
    FINAL_DATE = case_when(
      is.na(TEST_DATE) ~ INTERVIEW_DATE,
      TRUE ~ TEST_DATE
    )
  )

com_tip_PR_ORGANIZED <- 
  com_tip_PR_NEWDATE[, c(1, 2, 3, 31, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
                         16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                         29, 30)]

# file is saved in data folder
save(com_tip_PR_ORGANIZED, 
     file = "data/dataframes/com_tip_PR_ORGANIZED.Rda") 


# Load HISTORICAL data ####
PR_historical <- read.csv("data/raw/for_import_97.csv")

# Format dates to be mm/dd/yyyy
pr_hist_date <- PR_historical_97 %>%
  # Format dates to be mm/dd/yyyy
  mutate(INTDATE = as.Date(INTDATE, "%m/%d/%Y"))

 # file is saved in data folder
save(pr_hist_date, file = "data/dataframes/pr_hist_date.Rda")

```

Step 2: compare the number of records for each date available 

``` {r} 
# DATE COMPARISON ####
#
# load(file = "data/dataframes/pr_hist_date.Rda")
# load(file = "data/dataframes/com_tip_PR_ORGANIZED.Rda")

# ORACLE unique dates and number of occurrences
com_tip_PR_UNIQUEDATES <- com_tip_PR_ORGANIZED %>%
  group_by(FINAL_DATE) %>%
  summarize(count = n())
com_tip_PR_UNIQUEDATES_updated <- com_tip_PR_UNIQUEDATES %>%
  rename(COUNT_ORACLE = count)

# HISTORICAL unique dates and number of occurrences
pr_hist_date_UNIQUEDATES <- pr_hist_date %>%
  group_by(INTDATE) %>%
  summarize(count = n())
pr_hist_date_UNIQUEDATES_updated <- pr_hist_date_UNIQUEDATES %>%
  rename(
    COUNT_HISTORICAL = count,
    FINAL_DATE = INTDATE
  )

# combine two tables
unique_dates_merge <- full_join(com_tip_PR_UNIQUEDATES_updated, 
                                   pr_hist_date_UNIQUEDATES_updated, 
                                   by = "FINAL_DATE")
# compare
unique_dates_comparison <- unique_dates_merge %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable::flextable(unique_dates_comparison)

write.csv(unique_dates_comparison_97, file = "data/CSVs/dates_comparison_97.csv", row.names = FALSE)
save(unique_dates_comparison_97, file = "data/dataframes/dates_comparison_97.Rda") # file is saved in data fold

#' DATES ARE MISALIGNED from JAN 1 TO daylight savings starting and daylight 
#' savings ending TO DEC 31 when the data pull is conducted during daylight
#' savings 
#' 
#' run the following code if Oracle data is pull from mid March to early November
# # change ORACLE dates so they align with HISTORICAL
# 
# com_tip_PR_1997_corrected_dates <- com_tip_PR_1997_ORGANIZED %>%
#   mutate(
#     NEWDATE = case_when(
#       FINAL_DATE <= "1997-03-31" ~ (FINAL_DATE + days(1)),
#       TRUE ~ FINAL_DATE
#     ),
#     NEWDATE = case_when(
#       NEWDATE > "1997-10-25" ~ (NEWDATE + days(1)),
#       TRUE ~ NEWDATE
#     )
#   )
# 
# # file is saved in data folder
# save(com_tip_PR_1997_corrected_dates, 
#      file = "data/dataframes/com_tip_PR_1997_corrected_dates.Rda") 
# 
# # ORACLE unique dates and number of occurrences
# com_tip_PR_1997_UNIQUEDATES_2 <- com_tip_PR_1997_corrected_dates %>%
#   group_by(NEWDATE) %>%
#   summarize(count = n())
# com_tip_PR_1997_UNIQUEDATES_updated_2 <- com_tip_PR_1997_UNIQUEDATES_2 %>%
#   rename(COUNT_ORACLE = count)
# 
# # HISTORICAL unique dates and number of occurrences
# pr_97_historical_UNIQUEDATES <- pr_97 %>%
#   group_by(INTDATE) %>%
#   summarize(count = n())
# pr_97_historical_UNIQUEDATES_updated_2 <- pr_97_historical_UNIQUEDATES %>%
#   rename(
#     COUNT_HISTORICAL = count,
#     NEWDATE = INTDATE
#   )
# 
# # combine two tables
# unique_dates_merge_97_2 <- full_join(com_tip_PR_1997_UNIQUEDATES_updated_2, pr_97_historical_UNIQUEDATES_updated_2, by = "NEWDATE")

# compare
unique_dates_comparison_97 <- unique_dates_merge_97_2 %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))
# ORACLE IS MISSING 5 RECORDS ON 3/23 AND 3 ON 6/16 BUT MAKES UP FOR IT ON OTHER DATES

write.csv(unique_dates_comparison_97, file = "data/CSVs/dates_comparison_97.csv", row.names = FALSE)
save(unique_dates_comparison_97, file = "data/dataframes/dates_comparison_97.Rda") # file is saved in data fold

```

Step 3: area comparison 

```{r}
# AREAZIP COMPARISON ####

# Load MUNI conversion table
load("~/SEFSC-SFD-CFB-TIP-Compositions/data/dataframes/muni_code_clean_UPDATED.Rda")

# translate muni_zip -> CNTY_ID
# split AREAZIP into 2-1 chr columns
pr_97$muni_zip_HISTORICAL <- str_sub(pr_97$AREAZIP, -3, -2)

com_tip_PR_1997_corrected_dates$muni_zip_ORACLE <- as.numeric(as.character(com_tip_PR_1997_corrected_dates$SAMPLE_AREA_COUNTY_CODE))

# FIND UNIQUE MUNI CODES AND # OF OCCURANCES

# unique MUNI CODES and number of occurrences - ORACLE - 16 UNIQUE MUNI_ZIPS
com_tip_PR_1997_UNIQUE_MUNI <- com_tip_PR_1997_corrected_dates %>%
  group_by(muni_zip_ORACLE) %>%
  summarize(count = n())
com_tip_PR_1997_MUNI_updated <- com_tip_PR_1997_UNIQUE_MUNI %>%
  rename(count_ORACLE = count)
com_tip_PR_1997_MUNI_names <- com_tip_PR_1997_MUNI_updated %>%
  mutate(muni_name = muni_code_clean_UPDATED$CNTY_NAME[match(com_tip_PR_1997_MUNI_updated$muni_zip_ORACLE, muni_code_clean_UPDATED$muni_zip_ORACLE)])

# unique dates and number of occurrences- HISTORICAL- 14 UNIQUE MUNI_ZIP
pr_97_unique_MUNI <- pr_97 %>%
  group_by(muni_zip_HISTORICAL) %>%
  summarize(count = n())
pr_97_MUNI_updated <- pr_97_unique_MUNI %>%
  rename(count_HISTORICAL = count)
# pr_97_sp88_unique_MUNI_updated$muni_zip_HISTORICAL = as.numeric(as.character(pr_97_sp88_unique_MUNI_updated$muni_zip_HISTORICAL))
pr_97_MUNI_names <- pr_97_MUNI_updated %>%
  mutate(muni_name = muni_code_clean_UPDATED$CNTY_NAME[match(pr_97_MUNI_updated$muni_zip_HISTORICAL, muni_code_clean_UPDATED$muni_zip_HISTORICAL)])

# merge tables
unique_muni_merge_97 <- full_join(com_tip_PR_1997_MUNI_names, pr_97_MUNI_names, by = "muni_name")

# COMPARE
muni_comparison_97 <- unique_muni_merge_97 %>%
  mutate(COMPARE = (count_ORACLE - count_HISTORICAL))

# FIGURE OUT WHATS HAPPENING WITH THE HISTORICAL GEAR CODES

write.csv(muni_comparison_97, file = "data/CSVs/muni_comparison_97.csv", row.names = FALSE)
save(muni_comparison_97, file = "data/dataframes/muni_comparison_97.Rda") # file is saved in data folder

# GEAR COMPARISON ####

load(file = "data/dataframes/gear_codes.Rda")

# unique GEAR CODES and number of occurrences - ORACLE - 11 UNIQUE GEAR CODES
com_tip_PR_1997_unique_GEAR <- com_tip_PR_1997 %>%
  group_by(STANDARDGEAR_1) %>%
  summarize(count = n())
com_tip_PR_1997_unique_GEAR_updated <- com_tip_PR_1997_unique_GEAR %>%
  rename(
    count_ORACLE = count,
    STANDARD_GEAR = STANDARDGEAR_1
  )
# com_PR_lob_unique_MUNI_updated$muni_zip_ORACLE = as.numeric(as.character(com_PR_lob_unique_MUNI_updated$muni_zip_ORACLE))
com_tip_PR_1997_unique_GEAR_NAMES <- com_tip_PR_1997_unique_GEAR_updated %>%
  mutate(GEAR_name = gear_codes$STANDARD_NAME[match(com_tip_PR_1997_unique_GEAR_updated$STANDARD_GEAR, gear_codes$STANDARD_GEAR)])


# unique dates and number of occurrences- HISTORICAL- 13 UNIQUE MUNI_ZIP
pr_97_unique_GEAR <- pr_97 %>%
  group_by(GEARCODE) %>%
  summarize(count = n())
pr_97_unique_GEAR_UPDATED <- pr_97_unique_GEAR %>%
  rename(count_HISTORICAL = count)
# pr_97_sp901_unique_MUNI_updated$muni_zip_HISTORICAL = as.numeric(as.character(pr_97_sp901_unique_MUNI_updated$muni_zip_HISTORICAL))
pr_97_unique_GEAR_NAMES <- pr_97_unique_GEAR_UPDATED %>%
  mutate(GEAR_name = gear_codes$STANDARD_NAME[match(pr_97_unique_GEAR_UPDATED$GEARCODE, gear_codes$GEARCODE)])

# merge tables
unique_GEAR_merge_PR <- merge(com_tip_PR_1997_unique_GEAR_NAMES, pr_97_unique_GEAR_NAMES, by = "GEAR_name", all = TRUE)

# ORACLE by hand, diving gear (snare) vs HISTORICAL scuba diving and skin diving

# COMPARE
GEAR_comparison_97 <- unique_GEAR_merge_PR %>%
  mutate(COMPARE = (count_ORACLE - count_HISTORICAL))

write.csv(GEAR_comparison_97, file = "data/CSVs/GEAR_code_comparison_97.csv", row.names = FALSE)
save(GEAR_comparison_97, file = "data/dataframes/GEAR_code_comparison_97.Rda") # file is saved in data folder
# 	land crab trap AND pots and traps, spiny lobster NEED TO BE COMBINED INTO SAME GEAR GROUP
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
