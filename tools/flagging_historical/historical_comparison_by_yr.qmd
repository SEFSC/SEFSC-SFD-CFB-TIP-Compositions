---
title: "historical_comparison_by_yr"
format: docx
editor: visual
output-file: historical_comparison_by_yr.docx
---

# 2003

The purpose of this document is to compare the data in the Oracle TIP dataset to the data in the historical TIP records by year.

# Step 1:

## extract data by year from each source

```{r}
#| warning: false
#| echo: false

librarian::shelf(here, tidyverse, ROracle, keyring, dotenv, lubridate, flextable)
# pull year data if needed 
# cr_tip_yr(state_codes = "PR", year = 2003)

# Specify settings ####
oracle_rds <- "com_tip_PR_2003_20240304.RDS"
historical_csv <- "hist_03_kg.csv"
yr <- 2003

# Read in raw data ####
tip <- readRDS(here::here("data", "raw", oracle_rds))


# or extract oracle by yr and state
# cr_tip_yr(state_codes = "PR", year = "yr")

# Create a comparable table
tip_skeleton <- tip |> 
  # Standardize variable format
  janitor::clean_names() |>
  dplyr::mutate(
    id = as.character(id),
    interview_date = lubridate::as_date(interview_date),
    year = as.numeric(year),
    gear = case_when(
      land_standard_gear_name == "NOT CODED" ~ standardgearname_1,
      TRUE ~ land_standard_gear_name
    ),
    area_square = case_when(
      land_standard_area_name == "NA" ~ standardareaname_1,
      TRUE ~ land_standard_area_name
    ),
    # Create variable for sector (rec or com)
    sector = dplyr::case_when(
      fishing_mode %in% c(
        "HEADBOAT",
        "PARTY/CHARTER",
        "PRIVATE RECREATIONAL",
        "TOURNAMENT"
      ) ~
        "RECREATIONAL",
      is.na(fishing_mode) ~ "UNKNOWN",
      .default = fishing_mode
    )
  ) |> 
  # Simplify variable names
  dplyr::rename(
    species_code = obs_standard_species_code,
    species_name = obs_standard_species_name,
    length = length1_mm, 
    gear_code = gear_1
  ) |> 
  #select comparable variables
  select(
    id, # trip interview id
    interview_date,
    year,
    state_landed,
    county_landed,
    sample_area_state_code,
    sample_area_county_code,
    sample_area_place_code,
    sample_area_zip,  # historical data for sample area zip code  
    area_square,# grid area when available
    species_code,
    species_name,
    sex_name, # male, female, unknown, not sexed
    gear, # gear from land_standard_gear_name 
          # subbed w/ standardgearname_1 when unavailable
    gear_code,
    length,
    length_unit1, # original length unit
    length_type1, # original length type
    length_type2, # for future comparisons
    obs_weight_kg,
    obs_weight_unit, # original weight unit
    sample_condition,
    sector,
    fishing_mode,
  ) 
  

# create new filterable date value
tip_fixed_date <- tip_skeleton %>%
  mutate(
    test_date = as.Date(ymd_hms(interview_date)),
    date = case_when(
      is.na(test_date) ~ interview_date,
      TRUE ~ test_date
    )
  )

tip_ORGANIZED <-
  tip_fixed_date[, c(
    1, 2, 3, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    16, 17, 18, 19, 20, 21, 22, 23, 24, 25
  )]

# Save ####
saveRDS(
  tip_ORGANIZED,
  file = here::here(
    "data", "pr_historic",
    paste0(
      "com_tip_PR",
      "_",
      yr, 
      ".rds"
    )
  )
)


# Load HISTORICAL data ####
# instert historical csv name
pr_historical <-
  read.csv(here::here("data", "raw", historical_csv))

# Format dates to be mm/dd/yyyy
pr_hist_date <- pr_historical %>%
  janitor::clean_names() |>
  # Format dates to be mm/dd/yyyy
  mutate(intdate = as.Date(intdate, "%m/%d/%Y")) |> 
  select(sequence, # int_num 88-91, sequence 92-07
         intdate, # date 88-91, intdate 92-07
         areacounty, # port 88-91, areacounty 92-07
         areazip, # first 2 #s are muni code, 
                  # 3rd is place code, 
                  # if there are 5 #s last 2 are site location
                  # id_code 88-91, areazip 92-07
         areazip_kg, # edited area when areazip is inaccurate
         gearcode, # gear_code 88-91, gearcode 92-07
         meshsize, # only 92-07
         soaktime, # all yrs
         areafish_a, # areafish 93-99, areafish_a 00-07
         stdepth, # fish_depth 88-91, stdepth 92-07
         enddepth, # only 92-07
         species_b, # species 88-99, species_b if 00-07
         nodccode_b, # sp_code 88-91, nodccode 92-99, nodccode_b 00-07 
         frequency, # only 93-07
         stlength, # frk_len 88-91, stlength 92-07
         lengthtype, # tot_len 88-91, lengthtype 92-07
         weight_b, # weight 88-99, weight_b 00-07
         weightype, # wgt_type 88-91, not in 92, weighttype 93-07
         ) |> 
  # update renaming based on yr
  rename(date = intdate,
         area_square = areafish_a,
         species_code = species_b,
         species_code_hist = nodccode_b,
         length = stlength)

# Save ####
saveRDS(
  pr_hist_date,
  file = here::here(
    "data", "pr_historic",
    paste0(
      "pr_historical",
      "_",
      yr,
      ".rds"
    )
  )
)
```

# Step 2:

## compare the number of records for each date available

```{r}
#| warning: false
#| echo: false

# DATE COMPARISON ####

# ORACLE unique dates and number of occurrences
com_tip_PR_UNIQUEDATES <- tip_ORGANIZED %>%
  group_by(date) %>%
  summarize(count = n())
com_tip_PR_UNIQUEDATES_updated <- com_tip_PR_UNIQUEDATES %>%
  rename(COUNT_ORACLE = count)

# HISTORICAL unique dates and number of occurrences
pr_hist_date_UNIQUEDATES <- pr_hist_date %>%
  group_by(INTDATE) %>%
  summarize(count = n())
pr_hist_date_UNIQUEDATES_updated <- pr_hist_date_UNIQUEDATES %>%
  rename(
    COUNT_HISTORICAL = count,
    date = INTDATE
  )

# combine two tables
unique_dates_merge <- full_join(com_tip_PR_UNIQUEDATES_updated,
  pr_hist_date_UNIQUEDATES_updated,
  by = "date"
)
# compare
unique_dates_comparison <- unique_dates_merge %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable(unique_dates_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

write.csv(unique_dates_comparison,
  file = "~/SEFSC-SFD-CFB-TIP-Compositions/data/CSVs/dates_comparison.csv",
  row.names = FALSE
)

# Save ####
saveRDS(
  unique_dates_comparison,
  file = here::here(
    "data", "pr_historic",
    paste0(
      "unique_dates_comparison",
      "_",
      yr,
      ".rds"
    )
  )
)

# compare total number of records from each source
total_yr_date_comparison <- unique_dates_comparison |>
  summarize(
    total_tip = sum(COUNT_ORACLE, na.rm = TRUE),
    total_historical = sum(COUNT_HISTORICAL, na.rm = TRUE)
  ) |>
  mutate(comparison = total_tip - total_historical)

flextable(total_yr_date_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

#' DATES ARE MISALIGNED from JAN 1 TO daylight savings starting and daylight
#' savings ending TO DEC 31 when the data pull is conducted during daylight
#' savings
#'
#' run the following code if Oracle data is pull from mid March to early November
# # change ORACLE dates so they align with HISTORICAL
#
# com_tip_PR_1997_corrected_dates <- com_tip_PR_1997_ORGANIZED %>%
#   mutate(
#     NEWDATE = case_when(
#       date <= "1997-03-31" ~ (date + days(1)),
#       TRUE ~ date
#     ),
#     NEWDATE = case_when(
#       NEWDATE > "1997-10-25" ~ (NEWDATE + days(1)),
#       TRUE ~ NEWDATE
#     )
#   )
#
# # file is saved in data folder
# save(com_tip_PR_1997_corrected_dates,
#      file = "data/dataframes/com_tip_PR_1997_corrected_dates.Rda")
#
# # ORACLE unique dates and number of occurrences
# com_tip_PR_1997_UNIQUEDATES_2 <- com_tip_PR_1997_corrected_dates %>%
#   group_by(NEWDATE) %>%
#   summarize(count = n())
# com_tip_PR_1997_UNIQUEDATES_updated_2 <- com_tip_PR_1997_UNIQUEDATES_2 %>%
#   rename(COUNT_ORACLE = count)
#
# # HISTORICAL unique dates and number of occurrences
# pr_97_historical_UNIQUEDATES <- pr_97 %>%
#   group_by(INTDATE) %>%
#   summarize(count = n())
# pr_97_historical_UNIQUEDATES_updated_2 <- pr_97_historical_UNIQUEDATES %>%
#   rename(
#     COUNT_HISTORICAL = count,
#     NEWDATE = INTDATE
#   )
#
# # combine two tables
# unique_dates_merge_97_2 <- full_join(com_tip_PR_1997_UNIQUEDATES_updated_2, pr_97_historical_UNIQUEDATES_updated_2, by = "NEWDATE")

# # compare
# unique_dates_comparison_97 <- unique_dates_merge_97_2 %>%
#   mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))
# # ORACLE IS MISSING 5 RECORDS ON 3/23 AND 3 ON 6/16 BUT MAKES UP FOR IT ON OTHER DATES
#
# write.csv(unique_dates_comparison_97, file = "data/CSVs/dates_comparison_97.csv", row.names = FALSE)
# save(unique_dates_comparison_97, file = "data/dataframes/dates_comparison_97.Rda") # file is saved in data fold
```

# Step 3:

## area comparison

```{r}
#| warning: false
#| echo: false

# AREAZIP COMPARISON ####

# Load MUNI(county code) conversion table
load("~/SEFSC-SFD-CFB-TIP-Compositions/data/dataframes/muni_code_clean_UPDATED.Rda")

# translate muni_zip -> CNTY_ID
# split AREAZIP into 2-1 chr columns
pr_hist_date$muni_zip_HISTORICAL <- str_sub(pr_hist_date$AREAZIP, -3, -2)

unique(pr_hist_date$muni_zip_HISTORICAL)

tip_ORGANIZED$muni_zip_ORACLE <- as.numeric(as.character(tip_ORGANIZED$SAMPLE_AREA_COUNTY_CODE))

# FIND UNIQUE MUNI CODES AND # OF OCCURANCES

# unique MUNI CODES and number of occurrences - ORACLE
tip_ORGANIZED_UNIQUE_MUNI <- tip_ORGANIZED %>%
  group_by(muni_zip_ORACLE) %>%
  summarize(count = n())
tip_ORGANIZED_MUNI_updated <- tip_ORGANIZED_UNIQUE_MUNI %>%
  rename(COUNT_ORACLE = count)
tip_ORGANIZED_MUNI_names <- tip_ORGANIZED_MUNI_updated %>%
  mutate(
    muni_name =
      muni_code_clean_UPDATED$CNTY_NAME[match(
        tip_ORGANIZED_MUNI_updated$muni_zip_ORACLE,
        muni_code_clean_UPDATED$muni_zip_ORACLE
      )]
  )

# unique dates and number of occurrences- HISTORICAL
pr_hist_unique_MUNI <- pr_hist_date %>%
  group_by(muni_zip_HISTORICAL) %>%
  summarize(count = n())
pr_hist_MUNI_updated <- pr_hist_unique_MUNI %>%
  rename(COUNT_HISTORICAL = count)
# pr_97_sp88_unique_MUNI_updated$muni_zip_HISTORICAL = as.numeric(as.character(pr_97_sp88_unique_MUNI_updated$muni_zip_HISTORICAL))
pr_hist_MUNI_names <- pr_hist_MUNI_updated %>%
  mutate(
    muni_name =
      muni_code_clean_UPDATED$CNTY_NAME[match(
        pr_hist_MUNI_updated$muni_zip_HISTORICAL,
        muni_code_clean_UPDATED$muni_zip_HISTORICAL
      )]
  )

# merge tables
unique_muni_merge <- full_join(tip_ORGANIZED_MUNI_names, pr_hist_MUNI_names, by = "muni_name")

# COMPARE
muni_comparison <- unique_muni_merge %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable(muni_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# total comparison - ensure there is the same difference
total_yr_muni_comparison <- muni_comparison |>
  summarize(
    total_tip = sum(COUNT_ORACLE, na.rm = TRUE),
    total_historical = sum(COUNT_HISTORICAL, na.rm = TRUE)
  ) |>
  mutate(comparison = total_tip - total_historical)

flextable(total_yr_muni_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

hist_na <- pr_hist_date |>
  filter(muni_zip_HISTORICAL == "00")

# file is saved in data folder
save(muni_comparison,
  file = here::here(
    "data", "dataframes",
    paste0(
      "muni_comparison",
      "_",
      yr,
      ".Rda"
    )
  )
)
```

# Step 4:

## gear comparison

```{r}
#| warning: false
#| echo: false

# GEAR COMPARISON ####

# read in conversion table
gear_codes <- read_csv("~/SEFSC-SFD-CFB-TIP-Compositions/data/CSVs/TIPS_GEAR_GROUPS.csv")

# unique GEAR CODES and number of occurrences - ORACLE -
# use GEAR_1 because those are the island specific codes and will match with
# those used in historic
tip_unique_GEAR <- tip_ORGANIZED %>%
  group_by(GEAR_1) %>%
  summarize(count = n())
tip_unique_GEAR_updated <- tip_unique_GEAR %>%
  rename(
    COUNT_ORACLE = count,
    PR_GEAR = GEAR_1
  )
# com_PR_lob_unique_MUNI_updated$muni_zip_ORACLE = as.numeric(as.character(com_PR_lob_unique_MUNI_updated$muni_zip_ORACLE))
tip_unique_GEAR_NAMES <- tip_unique_GEAR_updated %>%
  mutate(
    GEAR_NAME =
      gear_codes$STANDARD_NAME[match(
        tip_unique_GEAR_updated$PR_GEAR,
        gear_codes$PR_GEAR
      )]
  )


# unique dates and number of occurrences- HISTORICAL- 13 UNIQUE MUNI_ZIP
pr_hist_unique_GEAR <- pr_hist_date %>%
  group_by(GEARCODE) %>%
  summarize(count = n())
pr_hist_unique_GEAR_UPDATED <- pr_hist_unique_GEAR %>%
  rename(
    COUNT_HISTORICAL = count,
    PR_GEAR = GEARCODE
  )

pr_hist_unique_GEAR_NAMES <- pr_hist_unique_GEAR_UPDATED %>%
  mutate(
    GEAR_NAME =
      gear_codes$STANDARD_NAME[match(
        pr_hist_unique_GEAR_UPDATED$PR_GEAR,
        gear_codes$PR_GEAR
      )]
  )

# merge tables
unique_GEAR_merge_PR <-
  merge(tip_unique_GEAR_NAMES,
    pr_hist_unique_GEAR_NAMES,
    by = "GEAR_NAME",
    all = TRUE
  )

# COMPARE
GEAR_comparison <- unique_GEAR_merge_PR %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable(GEAR_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# total comparison - ensure there is the same difference
total_yr_gear_comparison <- GEAR_comparison |>
  summarize(
    total_tip = sum(COUNT_ORACLE, na.rm = TRUE),
    total_historical = sum(COUNT_HISTORICAL, na.rm = TRUE)
  ) |>
  mutate(comparison = total_tip - total_historical)

flextable(total_yr_gear_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# file is saved in data folder
save(GEAR_comparison,
  file = here::here(
    "data", "dataframes",
    paste0(
      "GEAR_comparison",
      "_",
      yr,
      ".Rda"
    )
  )
)
```

# Step 5:

## species comparison

```{r}
#| warning: false
#| echo: false

# read in conversion table
species_codes <- 
  read_csv("~/SEFSC-SFD-CFB-TIP-Compositions/data/CSVs/pr_species_codes_oracle_conv.csv")
tip_ORGANIZED$OBS_STANDARD_SPECIES_CODE <- 
  str_remove(tip_ORGANIZED$OBS_STANDARD_SPECIES_CODE, "^0+")
# species_codes[146, 1] <- "0"

# FIND UNIQUE SPECIES CODES AND # OF OCCURANCES ####

tip_unique_SPC <- tip_ORGANIZED %>%
  group_by(OBS_STANDARD_SPECIES_CODE) %>%
  tally()

tip_spc_rename <- tip_unique_SPC |>
  rename(
    COUNT_ORACLE = n,
    tip_spc = OBS_STANDARD_SPECIES_CODE
  )

tip_unique_SPC_NAMES <- tip_spc_rename %>%
  mutate(
    SPC_NAME =
      species_codes$NAME[match(
        tip_spc_rename$tip_spc,
        species_codes$STANDARD_SPECIES_ID
      )]
  )


pr_hist_unique_spc <- pr_hist_date %>%
  group_by(SPECIES) %>% # if data 2000 to 2007, use SPECIES_B
  tally()
pr_hist_unique_spc_renamed <- pr_hist_unique_spc |>
  dplyr::rename(
    COUNT_HISTORICAL = n,
    hist_spc = SPECIES
  )

pr_hist_unique_SPC_NAMES <- pr_hist_unique_spc_renamed %>%
  mutate(
    SPC_NAME =
      species_codes$NAME[match(
        pr_hist_unique_spc_renamed$hist_spc,
        species_codes$ID
      )]
  )

# compare species names
unique_species_merge <-
  merge(tip_unique_SPC_NAMES, pr_hist_unique_SPC_NAMES,
    by = "SPC_NAME",
    all = TRUE
  )

# COMPARE
SPC_comparison <- unique_species_merge %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable(SPC_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# total comparison - ensure there is the same difference
total_yr_spc_comparison <- SPC_comparison |>
  summarize(
    total_tip = sum(COUNT_ORACLE, na.rm = TRUE),
    total_historical = sum(COUNT_HISTORICAL, na.rm = TRUE)
  ) |>
  mutate(comparison = total_tip - total_historical)

flextable(total_yr_spc_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# file is saved in data folder
save(SPC_comparison,
  file = here::here(
    "data", "dataframes",
    paste0(
      "SPC_comparison",
      "_",
      yr,
      ".Rda"
    )
  )
)

# some species codes (ex. 704 and 167746 seem to be
# missing from hist and oracle respectively)
# look into pr_species_codes_historic.csv
# rerun with other species conversion table ^ 
```

# Step 6:

## length comparison

```{r}
#| warning: false
#| echo: false

# FIND UNIQUE length values AND # OF OCCURANCES ####

tip_unique_len <- tip_ORGANIZED %>%
  group_by(LENGTH1_MM) %>%
  tally()

tip_len_rename <- tip_unique_len |>
  rename(
    COUNT_ORACLE = n,
    len = LENGTH1_MM
  )

pr_hist_unique_len <- pr_hist_date %>%
  group_by(STLENGTH) %>% # historical length variable, update based on variable used
  tally()
pr_hist_unique_len_renamed <- pr_hist_unique_len |>
  dplyr::rename(
    COUNT_HISTORICAL = n,
    len = STLENGTH
  )

# compare species names
unique_len_merge <-
  merge(tip_len_rename, pr_hist_unique_len_renamed,
    by = "len",
    all = TRUE
  )

len_comparison <- unique_len_merge %>%
  mutate(COMPARE = (COUNT_ORACLE - COUNT_HISTORICAL))

flextable(len_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# total comparison - ensure there is the same difference
total_yr_len_comparison <- len_comparison |>
  summarize(
    total_tip = sum(COUNT_ORACLE, na.rm = TRUE),
    total_historical = sum(COUNT_HISTORICAL, na.rm = TRUE)
  ) |>
  mutate(comparison = total_tip - total_historical)

flextable(total_yr_len_comparison) |>
  theme_box() %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 8, part = "all") %>%
  autofit()

# file is saved in data folder
save(len_comparison,
  file = here::here(
    "data", "dataframes",
    paste0(
      "len_comparison",
      "_",
      yr,
      ".Rda"
    )
  )
)



```
